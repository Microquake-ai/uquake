[tool.poetry]
name = "uquake"
version = "3.0.0"
description = "extension of the ObsPy library for local seismicity"
authors = ["uQuake development team <dev@uquake.org>"]
license = "AGPL-3.0-or-later"

# poetry config virtualenvs.create false; poetry env info

[tool.poetry.dependencies]
python = ">=3.9,<3.11"
numpy = "^1.18.0"
loguru = "^0.5.3"
pandas = "^1.2.1"
openpyxl = "^3.0.6"
obspy = "^1.2.2"
vtk = "^9.0.1"
h5py = "^3.2.1"
pydantic = "^1.8.2"
pyproj = "^3.2.1"
tqdm = "^4.62.3"
scikit-fmm = "^2022.3.26"
future = "^0.18.2"
pyasdf = "^0.8.1"
jupyter = "^1.0.0"

[tool.poetry.group.test.dependencies]
black = ">=23.3.0"
coverage = { extras = ["toml"], version = ">=7.2.5" }
mypy = ">=1.2.0"
poethepoet = ">=0.20.0"
pre-commit = ">=3.3.1"
pytest = ">=7.3.1"
pytest-clarity = ">=1.0.1"
pytest-mock = ">=3.10.0"
pytest-xdist = ">=3.2.1"
pytest-asyncio = "^0.21.0"
ruff = ">=0.0.270"

[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.9"
ipython = "^8.1.0"

[tool.poetry.group.doc.dependencies]
pdoc = "^14.1.0"

[tool.poetry.plugins] # Optional super table

[tool.poetry.plugins."uquake.io.inventory"]
ESG_SENSOR = 'uquake.io.inventory'

[tool.poetry.plugins."uquake.io.inventory.ESG_SENSOR"]
readFormat = "uquake.io.inventory:read_esg_sensor_file"

[tool.poetry.plugins."uquake.io.event"]
QUAKEML = "uquake.io.quakeml"
NLLOC = "uquake.io.nlloc"

[tool.poetry.plugins."uquake.io.waveform"]
ESG_SEGY = "uquake.io.waveform"
HSF = "uquake.io.waveform"
TEXCEL_CSV = "uquake.io.waveform"
IMS_CONTINUOUS = "uquake.io.waveform"
IMS_ASCII = "uquake.io.waveform"

[tool.poetry.plugins."uquake.io.waveform.ESG_SEGY"]
readFormat = "uquake.io.waveform:read_ESG_SEGY"

[tool.poetry.plugins."uquake.io.waveform.TEXCEL_CSV"]
readFormat = "uquake.io.waveform:read_TEXCEL_CSV"

[tool.poetry.plugins."uquake.io.waveform.IMS_ASCII"]
readFormat = "uquake.io.waveform:read_IMS_ASCII"

[tool.poetry.plugins."uquake.io.grid"]
NLLOC = "uquake.io.grid"
VTK = "uquake.io.grid"
PICKLE = "uquake.io.grid"
CSV = "uquake.io.grid"

#[tool.poetry.plugins."uquake.io.grid.NLLOC"]
#readFormat = "uquake.io.grid:read_nll"
#writeFormat = "uquake.io.grid:write_nll"

[tool.poetry.plugins."uquake.io.grid.NLLOC"]
readFormat = "uquake.io.grid:read_nlloc"
#writeFormat = "uquake.io.grid:write_nll"

[tool.poetry.plugins."uquake.io.grid.VTK"]
readFormat = "uquake.io.grid:read_vtk"
writeFormat = "uquake.io.grid:write_vtk"

[tool.poetry.plugins."uquake.io.grid.PICKLE"]
readFormat = "uquake.io.grid:read_pickle"
writeFormat = "uquake.io.grid:write_pickle"

[tool.poetry.plugins."uquake.io.grid.CSV"]
writeFormat = "uquake.io.grid:write_csv"
readFormat = "uquake.io.grid:read_csv"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 100
target-version = ["py39"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
testpaths = ["src", "tests"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
ignore-init-module-imports = true
line-length = 100
select = ["A", "ASYNC", "B", "C4", "C90", "D", "DTZ", "E", "F", "FLY", "I", "ISC", "N", "NPY", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["E501", "PGH001", "PGH002", "PGH003", "RET504", "S101"]
unfixable = ["F401", "F841"]
src = ["src", "tests"]
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      uquake
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: numpy)"
    name = "docformat"
    options = ["--docformat"]
    default = "numpy"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
